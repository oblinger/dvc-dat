{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about/","title":"About","text":"<p>DVC-DAT - A DVC-based Data Management Framework for managing Machine Learning related  data and code.</p> <p>Developed by Dan Oblinger dan@sportsvisio.com CTO SportsVisio Inc.</p>"},{"location":"overview/","title":"MK-DAT","text":"<p>DVC-DAT - Thin python wrapper for DVC-based ML-datasets and workflows - Python bindings for pulling/pushing data folders directly from DVC. - Git-like work flow for staging then pushing updates to the DVC data-repo. - Folder declaratively configured via json/yaml to dynamically launched python actions   (supports ML-Flow experiment and model building workflows) - Pandas DataFrames and Excel reporting over metrics applied to trees of data folders</p>"},{"location":"overview/#overview","title":"OVERVIEW","text":"<p>ML-DAT provides a simple way to manage data for machine learning projects. It has one key class and four key functions:</p> <ol> <li> <p>Dat -- A named, DVC-version, folder with associated metadata and      python action bindings.</p> </li> <li> <p>do -- Loads source-code structures and function into a space of     dotted.name.strings for easy reference within text configuration files.</p> </li> <li> <p>from_dat -- builds a pandas DataFrame by applying a set of     metrics (python code-bindings) over a set of Dats.</p> </li> <li> <p>to_excel -- slices and formats a pandas DataFrame into a collection     of Execl documents and sheets for presentation.</p> </li> <li> <p>dat_report -- wraps these functions into configurable report     generator.</p> </li> </ol>"},{"location":"overview/#api-overview","title":"API OVERVIEW","text":""},{"location":"overview/#manipulating-dict-trees","title":"Manipulating dict trees","text":"<p>Getters and setters for nested dictionaries.</p> Method Description Dat.get(Dat/dict, [key1,...], [default]) -&gt; value Get from tree of dict Dat.get(Dat/dict, \"dotted.key.name\", [default]) Get using dotted.names Dat.set(dict, [key1, key2, ...], value) Sets into a tree of dict Dat.set(dict, \"dotted.key.path\", value) Set using dotted names Dat.gets(Dat/dict, NAMES) -&gt; VALUES Get multiple values at once Dat.sets(dict, ASSIGNMENTS) Set multiple values at once <p>Examples: x = {} Dat.set(x, \"a.b.c\", 1)  # x = {'a': {'b': {'c': 1}}} Dat.get(x, \"a.b.c\")     # returns 1</p>"},{"location":"overview/#managing-dat-data-folders","title":"Managing Dat data folders","text":"Method Description Dat.create(path=, spec=) -&gt; Dat Create a new Dat from path template and spec. Dat.load(NAME) -&gt; Dat Load a Dat by name Dat.exists(NAME) -&gt; bool Returns True iff named Dat exists .get_spec() -&gt; Spec Returns the spec Dict tree for this Dat. .get_results() -&gt; Spec Returns the results Dict tree for this Dat. .get_path() -&gt; Path Get the path of the Dat. .get_path_name() -&gt; str Get the name of the Dat (relative to repo) .get_path_tail() -&gt; str Get last part of path (used as its short name) .save() -&gt; None Saves Dat's results to the filesystem. .delete() -&gt; None Delete the Dat from the filesystem. .copy(NAME) -&gt; Dat Copy the Dat to a new location. .move(NAME) -&gt; Dat Move the Dat to a new location. ------------------------------- ------------------------------------------------- DatContainer Methods Description ------------------------------- -------------------------------------------------- .get_dat_paths() -&gt; [str] Get the paths of all sub-Dats in the container. .get_dats() -&gt; [Dat] Loads and returns all the Dats in the container. <p>Note: NAME can be a full path, a path relative to the repo root or CWD.</p> <p>Dat Containers are Dats that recursively contain other Dats.</p>"},{"location":"overview/#loading-objects-from-source-code","title":"Loading objects from source-code","text":"<p>A DoManager (usually accessed via the 'do' singleton) is used to load python  source code objects and functions.</p> Method Description DoManager() Creates a new do namespace. .load(NAME, default=) -&gt; Any Loads Python source-code obj by dotted.name do(NAME, args, *kwargs) -&gt; Any Loads the named Python fn and calls it. do(DAT, args, *kwargs) -&gt; Any Invokes fn at 'main.do' within the Dat's spec .mount(module=, at=) Registers a python module by name .mount(file=, at=) Registers a .json, .yaml, or .py file .mount(value=, at=) Registers structured value in do space .mount(files_shallowly=, at=) Registers ALL .json, .yaml, or .py shallowly .add_do_folder(PATH) -&gt; None Set the folder to load python objects from. .get_base(BASE) -&gt; Any Get the base object based on it name. .merge_configs(BASE, override) Merge a config with an override. .expand_spec(SPEC) -&gt; SPEC Recursively merges spec with base spec. .dat_from_template(path=,spec=) Expands spec and uses it to call Dat.creates <p>NAME is a dotted.name.string that refers to a python object or function.</p>"},{"location":"overview/#dat_tools-data-frame-manipulation","title":"DAT_TOOLS - Data Frame manipulation","text":"Dat Tools Functions Description list([prefix]) Lists defined do cmds w/ prefix dt.from_dat([Dat, ...], [point_fn, ...]) -&gt; DF Applies point_fns to dats dt.to_excel(DF, PATH) -&gt; None Save a DF to an excel file dt.dat_report(spec, title=, folder=, source=, Build Excel report from Dats ....  metrics=, docs=, sheets=, columns= ....  formatted_columns=, verbose=, show=) -&gt; DF Cube(points=, dats=, point_fns=) Creates a Data Cube from Dats"}]}